// Generated by CoffeeScript 1.6.3
/*
  TVTunerController (Orientation + buttons) for touch devices

  @class bkcore.TVTunerController
  @author Mahesh Kulkarni <http://twitter.com/maheshkk>
*/


(function() {
  var TVTunerController, exports, _base;
  var self;

  TVTunerController = (function() {
   
    TVTunerController.isCompatible = function() {
      return true;
    };

    /*
      Creates a new TVTuner
    */


    function TVTunerController(domElement, keyPressCallback) {
      self = this;
      this.keyPressCallback = keyPressCallback;
      this.active = true;

      domElement.addEventListener('keydown', onKeyDown, false);
      domElement.addEventListener('keyup', onKeyUp, false);
    }

    function onKeyDown(event) {

      switch(event.keyCode)
      {
        case 50: /*up*/ this.forward = true; break;

        case 56: /*down*/this.backward = true; break;

        case 52: /*left*/this.left = true; break;

        case 54: /*right*/this.right = true; break;

        // case 81: /*Q*/this.ltrigger = true; break;
        // case 65: /*A*/this.ltrigger = true; break;

        // case 68: /*D*/this.rtrigger = true; break;
        // case 69: /*E*/this.rtrigger = true; break;
      }

      self.keyPressCallback(this);
    }

    function onKeyUp(event) {

      switch(event.keyCode)
      {
        case 50: /*up*/ this.forward = false; break;

        case 56: /*down*/this.backward = false; break;

        case 52: /*left*/this.left = false; break;

        case 54: /*right*/this.right = false; break;

        // case 81: /*Q*/this.ltrigger = false; break;
        // case 65: /*A*/this.ltrigger = false; break;

        // case 68: /*D*/this.rtrigger = false; break;
        // case 69: /*E*/this.rtrigger = false; break;
      }

      self.keyPressCallback(this);
    }

    /*
      @public
    */
    // TVTunerController.prototype.updateAvailable = function() {
    //   var accel, gamepads, gp, lt, rt, sel, _ref, _ref1, _ref2, _ref3;
    //   if (!this.active) {
    //     return false;
    //   }
    //   gamepads = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads();
    //   if (!(gamepads != null ? gamepads[0] : void 0)) {
    //     return false;
    //   }
    //   gp = gamepads[0];
    //   if ((gp.buttons == null) || (gp.axes == null)) {
    //     return;
    //   }
    //   this.lstickx = gp.axes[0];
    //   accel = gp.buttons[0];
    //   lt = gp.buttons[6];
    //   rt = gp.buttons[7];
    //   sel = gp.buttons[8];
    //   this.acceleration = (_ref = accel.pressed) != null ? _ref : accel;
    //   this.ltrigger = (_ref1 = lt.pressed) != null ? _ref1 : lt;
    //   this.rtrigger = (_ref2 = rt.pressed) != null ? _ref2 : rt;
    //   this.select = (_ref3 = sel.pressed) != null ? _ref3 : sel;
    //   this.keyPressCallback(this);
    //   return true;
    // };

    return TVTunerController;

  })();

  exports = exports != null ? exports : this;

  exports.bkcore || (exports.bkcore = {});

  (_base = exports.bkcore).controllers || (_base.controllers = {});

  exports.bkcore.controllers.TVTunerController = TVTunerController;

}).call(this);
